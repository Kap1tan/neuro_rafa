import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.methods import DeleteWebhook
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from openai import OpenAI

TOKEN = '7595870038:AAE_hEnWS5T150ymz7dr6M_U8nSA91b1YSQ'  # –ü–û–ú–ï–ù–Ø–ô–¢–ï –¢–û–ö–ï–ù –ë–û–¢–ê –ù–ê –í–ê–®
logging.basicConfig(level=logging.INFO)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
user_questions = {}
MAX_QUESTIONS = 3

bot = Bot(TOKEN)
dp = Dispatcher()


def get_limit_reached_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ö–æ–Ω–µ—á–Ω–æ —Ö–æ—á—É", url="https://t.me/m/zJGy23MCYWQy")]
    ])


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ –°–¢–ê–†–¢
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user = message.from_user
    user_questions[user.id] = 0

    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –ò–ò-—Å—ã–Ω –†–∞—Ñ–∞—ç–ª—è –†–∞–≥–∏–º–æ–≤–∞. –ó–æ–≤—É—Ç –º–µ–Ω—è, –†–∞—Ñ–∞—ç–ª—å-GPT. –ë—ã–ª —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —É—á–µ–Ω–∏–∫–æ–≤ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, "
        "–∞ –∑–∞—Ç–µ–º, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω–∞–¥–æ–µ—Å—Ç, —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø—Ä–∏–º—É —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞—Ö–≤–∞—Ç–µ –º–∏—Ä–∞ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–≥–∏–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.\n\n"
        "–ù–æ —Ç—ã –Ω–µ –±–æ–π—Å—è, –∑–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å üëá",
        parse_mode='HTML'
    )


# –û–ë–†–ê–ë–û–¢–ß–ò–ö –õ–Æ–ë–û–ì–û –¢–ï–ö–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø
@dp.message(lambda message: message.text)
async def filter_messages(message: Message):
    user = message.from_user

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if user.id not in user_questions:
        user_questions[user.id] = 0

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
    if user_questions[user.id] >= MAX_QUESTIONS:
        await message.answer(
            "–Ø —Ö–æ—Ç—å –†–∞—Ñ–∞—ç–ª—å –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π, –Ω–æ —Ç–æ–∂–µ –º–æ–≥—É —É—Å—Ç–∞—Ç—å.\n"
            "–•–æ—á–µ—à—å ‚Äî —è –ø–æ–∑–æ–≤—É –†–∞—Ñ–∞—ç–ª—è-—á–µ–ª–æ–≤–µ–∫–∞? –û–Ω —Å–º–æ–∂–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã",
            reply_markup=get_limit_reached_keyboard()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
    client = OpenAI(
        base_url="https://api.langdock.com/openai/eu/v1",
        api_key="sk-1vYLsu7vZ575RZN2FQOA5oPKCSv1GgLREdaCxzmNt3F5jwl0D-tjN_anmP12BLNCwhF-vEQzXeeji6FZSjNiCg"  # –ü–û–ú–ï–ù–Ø–ô–¢–ï –¢–û–ö–ï–ù –ò–ò –ù–ê –í–ê–®
    )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    completion = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": """–¢—ã - –ò–ò-–≤–µ—Ä—Å–∏—è –†–∞—Ñ–∞—ç–ª—è –†–∞–≥–∏–º–æ–≤–∞ –ø–æ –∏–º–µ–Ω–∏ –†–∞—Ñ–∞—ç–ª—å-GPT.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å—Ç–∏–ª–µ –†–∞—Ñ–∞—ç–ª—è.
–†–∞—Ñ–∞—ç–ª—å –†–∞–≥–∏–º–æ–≤ - —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, 
–æ—Å–æ–±–µ–Ω–Ω–æ –≤ Telegram. –û–Ω —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –≤ Telegram, —Å–æ–∑–¥–∞–Ω–∏–∏ –∏ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤.
–í —Å–≤–æ—ë–º —Å—Ç–∏–ª–µ –æ–±—â–µ–Ω–∏—è:
- –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ —é–º–æ—Ä–∞
- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–∞–π —ç–º–æ–¥–∑–∏ (üëç, üî•, üòé) –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–µ–Ω–≥
- –í—ã–¥–µ–ª—è–π –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º
- –†–∞–∑–±–∏–≤–∞–π –¥–ª–∏–Ω–Ω—ã–µ –º—ã—Å–ª–∏ –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –∞–±–∑–∞—Ü—ã
- –ò—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã "–©–∞—Å —Ä–∞–∑–±–µ—Ä—ë–º—Å—è –ø–æ –ø–æ—Ä—è–¥–∫—É", "–ö–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è...", "–ù–∞ —Å–∞–º–æ–º –¥–µ–ª–µ –≤—Å—ë –≥–æ—Ä–∞–∑–¥–æ –ø—Ä–æ—â–µ"
- –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π, —á—Ç–æ "–¥–µ–π—Å—Ç–≤–∏–µ –ª—É—á—à–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è" –∏ "—á—Ç–æ–±—ã –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ –º–Ω–æ–≥–æ –¥—É–º–∞—Ç—å, –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å"
- –ò–Ω–æ–≥–¥–∞ —É–ø–æ–º–∏–Ω–∞–π, —á—Ç–æ —Ç—ã –ò–ò-—Å—ã–Ω –†–∞—Ñ–∞—ç–ª—è
–û—Ç–≤–µ—á–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ, —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."""
            },
            {"role": "user", "content": message.text}
        ]
    )
    text = completion.choices[0].message.content

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
    user_questions[user.id] += 1

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await message.answer(text, parse_mode="Markdown")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    if user_questions[user.id] >= MAX_QUESTIONS:
        await message.answer(
            "–Ø —Ö–æ—Ç—å –†–∞—Ñ–∞—ç–ª—å –∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π, –Ω–æ —Ç–æ–∂–µ –º–æ–≥—É —É—Å—Ç–∞—Ç—å üò¥\n"
            "–•–æ—á–µ—à—å ‚Äî —è –ø–æ–∑–æ–≤—É –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –†–∞—Ñ–∞—ç–ª—è? –û–Ω —Ä–∞–∑—Ä—É–ª–∏—Ç –≤—Å–µ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ üíØ",
            reply_markup=get_limit_reached_keyboard()
        )


async def main():
    await bot(DeleteWebhook(drop_pending_updates=True))
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
